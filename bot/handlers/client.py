from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils.callback_data import CallbackData
from aiogram import types

from bot import dp, sim_service, loop
from bot.models.user import User
from bot.models.onlinesim import Onlinesim, OnlinesimStatus
from bot.user_data import config
from bot.utils.qiwi import generate_qiwi_payment_form_link

from icecream import ic

countries_services_cb = CallbackData("countries_services", "country_code")
service_cb = CallbackData("service", "country_code", "service_code")
buy_number_cb = CallbackData("buy_service_number", "country_code", "service_code", "price")
task_manager_cb = CallbackData("task_manager", "tzid")


class ReciveSMS(StatesGroup):
    waiting_country = State()
    waiting_service = State()


def generate_main_reply_keyboard():
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_markup.row("–ü—Ä–∏–µ–º –°–ú–°")
    keyboard_markup.row("–ë–∞–ª–∞–Ω—Å", "–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –°–ú–°")
    return keyboard_markup


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª—è –≤ –ë–î
# –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–≥–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª—è –≤ –ë–î (–ò–ª–∏ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —è–∑—ã–∫)
@dp.message_handler(lambda msg: User.where(user_id=msg.chat.id).first() is None)
async def new_user_message(msg: types.Message):
    ic("User not found, create ...")
    # TODO: Implement referrals
    # bot_start_arguments = message.get_args()

    # if not bot_start_arguments or not bot_start_arguments.isdigit():
    #     referral = None
    # else:
    #     referral = int(bot_start_arguments)
    User.create(user_id=msg.chat.id)


@dp.message_handler(commands=['start'])
async def main_menu_message(msg: types.Message):
    message_text = [
        f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!",
        "–ü—Ä–∏ –ø–æ–º–æ—â–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —è –¥–∞–º, —Ç–µ–º —Å–∞–º—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö –∏ —Å–æ—Ü.—Å–µ—Ç—è—Ö"
    ]
    await msg.reply("\n".join(message_text), reply_markup=generate_main_reply_keyboard())


@dp.message_handler(Text(equals="–ü—Ä–∏–µ–º –°–ú–°", ignore_case=True))
async def sms_recieve_country_set_message(msg: types.Message, state: FSMContext):
    countries_list = await sim_service.countries_list()
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)

    countries_btn_list = []
    for country_code, country_name in countries_list.items():
        summary_numbers = await sim_service.summary_numbers_count(country_code)
        if summary_numbers == 0:
            continue
        country_btn = types.InlineKeyboardButton(f"{country_name} ({summary_numbers})", callback_data=countries_services_cb.new(country_code))
        # country_btn = types.InlineKeyboardButton(country_name, callback_data=countries_services_cb.new(country_code))
        countries_btn_list.append(country_btn)
    keyboard_markup.add(*countries_btn_list)

    await msg.reply("1. –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç—Ä–∞–Ω—É, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –í–∞–º –≤—ã–¥–∞–Ω", reply_markup=keyboard_markup)


@dp.callback_query_handler(countries_services_cb.filter())
async def countries_services_message(call: types.CallbackQuery, callback_data: dict):
    country_code = callback_data["country_code"]
    services_list = await sim_service.number_stats(country_code)

    keyboard_markup = types.InlineKeyboardMarkup()
    services_btn_list = []
    for service_code, service in services_list.items():
        service_btn = types.InlineKeyboardButton(f"{service['service']} ({service['count']})", callback_data=service_cb.new(country_code, service_code))
        services_btn_list.append(service_btn)
    keyboard_markup.add(*services_btn_list)

    await call.message.edit_text("2. –í–µ–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –°–ú–°", reply_markup=keyboard_markup)


@dp.callback_query_handler(service_cb.filter())
async def service_message(call: types.CallbackQuery, callback_data: dict):
    country_code = callback_data["country_code"]
    service_code = callback_data["service_code"]

    countries_list = await sim_service.countries_list()
    services_list = await sim_service.number_stats(country_code)

    service = services_list.get(service_code)
    country = countries_list.get(country_code)

    message_text = [
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {service['service']}",
        f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: {country}",
        "",
        f"–¶–µ–Ω–∞: {service['price']}‚ÇΩ",
        f"–í –Ω–∞–ª–∏—á–∏–∏: {service['count']} –Ω–æ–º–µ—Ä–æ–≤"
    ]

    keyboard_markup = types.InlineKeyboardMarkup()
    buy_btn = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=buy_number_cb.new(country_code, service_code, service['price']))
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=countries_services_cb.new(country_code))
    keyboard_markup.add(buy_btn)
    keyboard_markup.add(back_btn)

    await call.message.edit_text("\n".join(message_text), reply_markup=keyboard_markup)


@dp.callback_query_handler(buy_number_cb.filter())
async def buy_service_number_message(call: types.CallbackQuery, callback_data: dict):
    country_code = callback_data["country_code"]
    service_code = callback_data["service_code"]
    service_price = float(callback_data["price"])

    user_balance = User.where(user_id=call.message.chat.id).first().balance
    if user_balance < service_price:
        await call.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", True)
        return

    status, tzid = await sim_service.buy_number(service_code, country_code)

    if status is not True:
        await call.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", True)
        return

    sim_service.run_waiting_code_task(tzid)

    Onlinesim.create(user_id=call.message.chat.id, tzid=tzid, service_code=service_code, country_code=country_code)

    await call.answer()


@dp.message_handler(Text(equals="–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –°–ú–°", ignore_case=True))
async def all_operations_message(msg: types.Message, messaging_type="answer", task_status: int = OnlinesimStatus.waiting):
    keyboard = types.InlineKeyboardMarkup()
    user_operations = Onlinesim.where(user_id=msg.chat.id, status=task_status).all()
    if not user_operations:
        no_tasks_btn = types.InlineKeyboardButton("üëì –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤", callback_data="tester")
        keyboard.add(no_tasks_btn)
    else:
        for task in user_operations:
            task_btn = types.InlineKeyboardButton(task, callback_data=task_manager_cb.new(task.tzid))
            keyboard.add(task_btn)

    active_tasks_btn = types.InlineKeyboardButton("‚ôªÔ∏è –∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="active_tasks")
    finished_tasks_btn = types.InlineKeyboardButton("‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="finished_tasks")
    canceled_tasks_btn = types.InlineKeyboardButton("‚ùå –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", callback_data="canceled_tasks")
    expired_tasks_btn = types.InlineKeyboardButton("üï∞ –ò—Å—Ç–µ–∫—à–∏–µ", callback_data="expired_tasks")
    keyboard.row(active_tasks_btn, finished_tasks_btn, canceled_tasks_btn)
    keyboard.row(expired_tasks_btn)

    if task_status == OnlinesimStatus.waiting:
        task_type_name = "‚ôªÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ"
    elif task_status == OnlinesimStatus.success:
        task_type_name = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"
    elif task_status == OnlinesimStatus.cancel:
        task_type_name = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"
    elif task_status == OnlinesimStatus.expire:
        task_type_name = "üï∞ –ò—Å—Ç–µ–∫—à–∏–µ"

    message_text = f"{task_type_name} –æ–ø–µ—Ä–∞—Ü–∏–∏ ({len(user_operations)}):"

    if messaging_type == "answer":
        await msg.reply(message_text, reply_markup=keyboard)
    elif messaging_type == "edit_message":
        await msg.edit_text(message_text, reply_markup=keyboard)


@dp.callback_query_handler(task_manager_cb.filter())
async def task_manager_message(call: types.CallbackQuery, callback_data: dict):
    tzid = int(callback_data["tzid"])

    task_info = Onlinesim.where(tzid=tzid).first()
    if not task_info:
        await call.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", True)
        return

    message_text = [
        f"ID –æ–ø—Ä–µ–∞—Ü–∏–∏: {task_info.tzid}",
        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ",
        "–°—Ç—Ä–∞–Ω–∞: ",
        "–°–µ—Ä–≤–∏—Å: ",
        "–¶–µ–Ω–∞: ",
        "–°—Ç–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏: "
    ]

    await call.message.edit_text('\n'.join(message_text))
    await call.answer()

@dp.message_handler(Text(equals="–ë–∞–ª–∞–Ω—Å", ignore_case=True))
async def balance_message(msg: types.Message, msg_type="answer"):
    user_balance = User.where(user_id=msg.chat.id).first().balance

    keyboard = types.InlineKeyboardMarkup()
    # refill_history_btn = types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="reffil_history")
    refill_balance_btn = types.InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="refill_balance")
    # keyboard.add(refill_history_btn)
    keyboard.add(refill_balance_btn)
    message_text = [
        f"üí≤ –í–∞—à –±–∞–ª–∞–Ω—Å: **{user_balance} ‚ÇΩ**",
        f"üè∑ –í–∞—à id: `{msg.chat.id}`",
        "",
        # "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ: /referrals"
    ]
    if msg_type == "answer":
        await msg.reply('\n'.join(message_text), reply_markup=keyboard, parse_mode=types.ParseMode.MARKDOWN)
    elif msg_type == "edit":
        await msg.edit_text('\n'.join(message_text), reply_markup=keyboard, parse_mode=types.ParseMode.MARKDOWN)


@dp.callback_query_handler(text="refill_history")
async def refill_history_message(call: types.CallbackQuery):
    # TODO: Implement
    keyboard = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="balance_btn")
    keyboard.add(back_btn)
    await call.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", reply_markup=keyboard)


@dp.callback_query_handler(text='refill_balance')
async def refill_balance_message(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    qiwi_btn = types.InlineKeyboardButton("–ö–∏–≤–∏", callback_data="refill_balance_via_qiwi")
    keyboard.add(qiwi_btn)
    message_text = [
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
        f"–ï—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É: {config.ADMIN_USERNAME}"
    ]
    await call.message.edit_text('\n'.join(message_text), reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='refill_balance_via_qiwi')
async def refill_balance_via_qiwi_message(call: types.CallbackQuery):
    qiwi_payment_link = generate_qiwi_payment_form_link("99", config.QIWI_WALLET, 750.0, call.message.chat.id, 643, ["account", "comment"], 0)

    keyboard = types.InlineKeyboardMarkup()
    payement_qiwi_btn = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", qiwi_payment_link)
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="refill_balance")
    keyboard.add(payement_qiwi_btn)
    keyboard.add(back_btn)
    message_text = [
        "üí≤ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –∫–∏–≤–∏ üí≤",
        "",
        "üí• –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –Ω–∞",
        f"üëù Qiwi –∫–æ—à–µ–ª–µ–∫: `{config.QIWI_WALLET}`",
        "‚ùóÔ∏è –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ:",
        f'`{call.message.chat.id}`',
        "–î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 2 –º–∏–Ω—É—Ç",
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ"
    ]
    await call.message.edit_text('\n'.join(message_text), parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
    await call.answer()



@dp.message_handler(Text(equals="–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", ignore_case=True))
@dp.message_handler(commands=["referrals"])
async def check_referrals(msg: types.Message):
    # TODO: Implement
    # referrals = db.get_referrals(message.chat.id)
    bot_username = (await msg.bot.me).username
    bot_link = f"https://t.me/{bot_username}?start={msg.chat.id}"
    message_text = [
        "üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üë•",
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {len(referrals)}",
        "",
        "üîó –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:",
        bot_link
    ]

    await msg.answer('\n'.join(message_text))


@dp.callback_query_handler()
async def callback_handler(call: types.CallbackQuery):
    answer_data = call.data
    if answer_data == "balance_btn":
        await balance_message(call.message, "edit")
        await call.answer()
    elif answer_data == 'active_tasks':
        await all_operations_message(call.message, "edit_message", OnlinesimStatus.waiting)
        await call.answer()
    elif answer_data == 'finished_tasks':
        await all_operations_message(call.message, "edit_message", OnlinesimStatus.success)
        await call.answer()
    elif answer_data == 'canceled_tasks':
        await all_operations_message(call.message, "edit_message", OnlinesimStatus.cancel)
        await call.answer()
    elif answer_data == 'expired_tasks':
        await all_operations_message(call.message, "edit_message", OnlinesimStatus.expire)
        await call.answer()
    else:
        await call.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", True)
