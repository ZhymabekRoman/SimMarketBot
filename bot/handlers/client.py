from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.markdown import hlink
from aiogram import types

from bot import bot, dp, sim_service
from bot.models.user import User
from bot.models.refills import Refill, RefillSource
from bot.models.onlinesim import Onlinesim, OnlinesimStatus
from bot.user_data import config
from bot.utils.qiwi import generate_qiwi_payment_form_link
from bot.utils.yoomoney import generate_yoomoney_payment_form_link
from bot.utils.timedelta import readable_timedelta
from bot.utils.sms_code import mark_sms_code

import os
import pytz
import datetime
import math
from requests.models import PreparedRequest

from icecream import ic

countries_cb = CallbackData("countries", "page")
country_services_cb = CallbackData("country_services", "page", "country_code")
service_cb = CallbackData("service", "country_code", "service_code")
buy_number_cb = CallbackData("buy_service_number", "country_code", "service_code", "price")
task_manager_cb = CallbackData("task_manager", "tzid")
cancel_task_cb = CallbackData("cancel_task", "tzid")
paymemt_method_cb = CallbackData("paymemt_method", "amount")
refill_balance_via_cb = CallbackData("refill_via", "amount", "method")
countries_page_navigation_cb = CallbackData("countries_page_navigation", "pages")
services_page_navigation_cb = CallbackData("services_page_navigation", "country_code" "pages")


class ReciveSMS(StatesGroup):
    waiting_country = State()
    waiting_service = State()


class PaymentMethod(StatesGroup):
    waiting_amount = State()
    waiting_method = State()


@dp.callback_query_handler(text="main")
async def main_menu_btn_message(call: types.CallbackQuery):
    await main_menu_message(call.message, "edit")
    await call.answer()


@dp.message_handler(commands=['start'])
async def main_menu_message(msg: types.Message, msg_type="answer"):
    if not User.where(user_id=msg.chat.id).first():
        bot_start_arguments = msg.get_args()
        reffer = None

        if bot_start_arguments and bot_start_arguments.isdigit():
            reffer = int(bot_start_arguments)

        if reffer and User.where(user_id=reffer).first():
            await bot.send_message(chat_id=reffer, text=f"–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è {hlink(title=str(msg.chat.id), url=f'tg://user?id={msg.chat.id}')}!", parse_mode=types.ParseMode.HTML)

        User.create(user_id=msg.chat.id, reffer_id=reffer)

    keyboard = types.InlineKeyboardMarkup()
    sms_recieve_country_btn = types.InlineKeyboardButton("üì≤ –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data=countries_cb.new(1))
    all_sms_operations_btn = types.InlineKeyboardButton("üì´ –í—Å–µ –°–ú–° –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="all_operations")
    partners_btn = types.InlineKeyboardButton("üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="partners")
    balance_btn = types.InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    information_btn = types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="information")
    keyboard.row(sms_recieve_country_btn, balance_btn)
    keyboard.row(all_sms_operations_btn, partners_btn)
    keyboard.row(information_btn)

    message_text = [
        f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!",
        "–ü—Ä–∏ –ø–æ–º–æ—â–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —è –¥–∞–º, —Ç–µ–º —Å–∞–º—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö –∏ —Å–æ—Ü.—Å–µ—Ç—è—Ö"
    ]
    if msg_type == "answer":
        await msg.answer_photo(types.InputFile(os.path.join("bot", "images", "main.jpg")), caption='\n'.join(message_text), reply_markup=keyboard)
    elif msg_type == "edit":
        await msg.edit_caption("\n".join(message_text), reply_markup=keyboard)


@dp.callback_query_handler(countries_page_navigation_cb.filter())
async def countries_page_navigation__message(call: types.CallbackQuery, callback_data: dict):
    pages = int(callback_data["pages"])

    keyboard_markup = types.InlineKeyboardMarkup(row_width=5)
    for page in range(pages):
        page_btn = types.InlineKeyboardButton(page + 1, callback_data=countries_cb.new(page + 1))
        keyboard_markup.insert(page_btn)
    await call.message.edit_caption("üìñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", reply_markup=keyboard_markup)
    await call.answer()


@dp.callback_query_handler(countries_cb.filter())
async def sms_recieve_country_set_message(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    page = int(callback_data["page"])
    countries_list = await sim_service.countries_list()
    pages_number = math.ceil(float(len(countries_list)) / float(15))

    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    for country_code, country_name in list(countries_list.items())[(page - 1) * 15: ((page - 1) * 15) + 15]:
        summary_numbers = await sim_service.summary_numbers_count(country_code)
        country_btn = types.InlineKeyboardButton(f"{country_name} ({summary_numbers})", callback_data=country_services_cb.new(1, country_code))
        keyboard_markup.insert(country_btn)

    plagination_keyboard_list = []

    if page > 1:
        previous_page_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=countries_cb.new(page - 1))
        plagination_keyboard_list.append(previous_page_btn)

    pages_number_btn = types.InlineKeyboardButton(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page} –∏–∑ {pages_number}", callback_data=countries_page_navigation_cb.new(pages_number))
    plagination_keyboard_list.append(pages_number_btn)

    if page < pages_number:
        next_page_btn = types.InlineKeyboardButton("‚û°Ô∏è", callback_data=countries_cb.new(page + 1))
        plagination_keyboard_list.append(next_page_btn)

    keyboard_markup.row(*plagination_keyboard_list)

    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main")
    keyboard_markup.add(back_btn)

    await call.message.edit_caption("1. –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç—Ä–∞–Ω—É, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –í–∞–º –≤—ã–¥–∞–Ω", reply_markup=keyboard_markup)
    await call.answer()


@dp.callback_query_handler(country_services_cb.filter())
async def country_services_message(call: types.CallbackQuery, callback_data: dict):
    page = int(callback_data["page"])
    country_code = callback_data["country_code"]
    services_list = await sim_service.number_stats(country_code)
    pages_number = math.ceil(float(len(services_list)) / float(15))

    countries_list = await sim_service.countries_list()
    country = countries_list.get(country_code)

    keyboard_markup = types.InlineKeyboardMarkup()
    for service_code, service in list(services_list.items())[(page - 1) * 15: ((page - 1) * 15) + 15]:
        service_btn = types.InlineKeyboardButton(f"{service['service']} ({service['count']})", callback_data=service_cb.new(country_code, service_code))
        keyboard_markup.insert(service_btn)

    plagination_keyboard_list = []

    if page > 1:
        previous_page_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=country_services_cb.new(page - 1, country_code))
        plagination_keyboard_list.append(previous_page_btn)

    pages_number_btn = types.InlineKeyboardButton(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page} –∏–∑ {pages_number}", callback_data=plagination_pages_cb.new("services", pages_number))
    plagination_keyboard_list.append(pages_number_btn)

    if page < pages_number:
        next_page_btn = types.InlineKeyboardButton("‚û°Ô∏è", callback_data=country_services_cb.new(page + 1, country_code))
        plagination_keyboard_list.append(next_page_btn)

    keyboard_markup.row(*plagination_keyboard_list)

    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=countries_cb.new(1))
    keyboard_markup.add(back_btn)

    await call.message.edit_caption(f"üåç –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: {country}\n2. –í–µ–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –°–ú–°", reply_markup=keyboard_markup)
    await call.answer()


@dp.callback_query_handler(service_cb.filter())
async def service_message(call: types.CallbackQuery, callback_data: dict):
    country_code = callback_data["country_code"]
    service_code = callback_data["service_code"]

    countries_list = await sim_service.countries_list()
    services_list = await sim_service.number_stats(country_code)

    service = services_list.get(service_code)
    country = countries_list.get(country_code)
    price = (service['price'] * (config.COMMISSION_AMOUNT / 100)) + service['price']

    message_text = [
        f"‚ñ´Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {service.get('service')}",
        f"‚ñ´Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: {country}",
        "",
        f"‚ñ´Ô∏è –¶–µ–Ω–∞: {price}‚ÇΩ",
        f"‚ñ´Ô∏è –í –Ω–∞–ª–∏—á–∏–∏: {service.get('count')} –Ω–æ–º–µ—Ä–æ–≤"
    ]

    keyboard_markup = types.InlineKeyboardMarkup()
    buy_btn = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=buy_number_cb.new(country_code, service_code, price))
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=country_services_cb.new(1, country_code))
    keyboard_markup.add(buy_btn)
    keyboard_markup.add(back_btn)

    await call.message.edit_caption("\n".join(message_text), reply_markup=keyboard_markup)
    await call.answer()


@dp.callback_query_handler(buy_number_cb.filter())
async def buy_service_number_message(call: types.CallbackQuery, callback_data: dict):
    country_code = callback_data["country_code"]
    service_code = callback_data["service_code"]
    service_price = float(callback_data["price"])

    user = User.where(user_id=call.message.chat.id).first()
    user_balance = user.balance

    if user_balance < service_price:
        await call.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", True)
        return

    status, tzid = await sim_service.getNum(service_code, country_code)

    if status == "NO_NUMBER":
        await call.answer("–£–ø—Å, –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å", True)
        return
    elif status in ["WARNING_LOW_BALANCE"]:
        await call.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", True)
        await bot.send_message(chat_id=config.ADMIN_ID, text="–¢–†–ï–í–û–ì–ê! –£ –í–ê–° –ü–û–ß–¢–ò –ó–ê–ö–û–ù–ß–ò–õ–°–Ø –ë–ê–õ–ê–ù–° –í –°–ï–†–í–ò–°–ï OnlineSim! –°–†–û–ß–ù–û –ü–û–ü–û–õ–ù–ò–¢–ï!!!")
        return
    elif status != 1:
        await call.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", True)
        return

    try:
        service_status = await sim_service.getState(tzid)
    except Exception:
        await call.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", True)
        return
        raise

    Onlinesim.create(user_id=call.message.chat.id, tzid=tzid, service_code=service_code, country_code=country_code, price=service_price, number=service_status.get('number'))
    user.update(balance=user_balance - service_price)
    if user.reffer_id is not None:
        _referral_amount = 0.25
        Refill.create(user_id=user.reffer_id, source=RefillSource.REFERRAL, amount=_referral_amount)
        user.reffer.update(balance=user.reffer.balance + _referral_amount)

    await call.answer("–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–∞–∑–∞–Ω!")
    await task_manager_message(call, {"tzid": tzid})


@dp.callback_query_handler(text="all_operations")
async def all_operations_message(call: types.CallbackQuery, task_status: int = OnlinesimStatus.waiting):
    keyboard = types.InlineKeyboardMarkup()
    user_operations = Onlinesim.where(user_id=call.message.chat.id, status=task_status).all()
    active = Onlinesim.where(user_id=call.message.chat.id, status=OnlinesimStatus.waiting).all()
    finish = Onlinesim.where(user_id=call.message.chat.id, status=OnlinesimStatus.success).all()
    cancel = Onlinesim.where(user_id=call.message.chat.id, status=OnlinesimStatus.cancel).all()
    expire = Onlinesim.where(user_id=call.message.chat.id, status=OnlinesimStatus.expire).all()
    if not user_operations:
        no_tasks_btn = types.InlineKeyboardButton("üëì –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤", callback_data="tester")
        keyboard.add(no_tasks_btn)
    else:
        for task in user_operations:
            countries_list = await sim_service.countries_list()
            services_list = await sim_service.number_stats(task.country_code)

            service = services_list.get(task.service_code)
            country = countries_list.get(task.country_code)

            task_btn = types.InlineKeyboardButton(f"{task.id} | {service['service']} | {country}", callback_data=task_manager_cb.new(task.tzid))
            keyboard.add(task_btn)

    active_tasks_btn = types.InlineKeyboardButton(f"‚ôªÔ∏è –∞–∫—Ç–∏–≤–Ω—ã–µ ({len(active)})", callback_data="active_tasks")
    finished_tasks_btn = types.InlineKeyboardButton(f"‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ ({len(finish)})", callback_data="finished_tasks")
    canceled_tasks_btn = types.InlineKeyboardButton(f"‚ùå –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ ({len(cancel)})", callback_data="canceled_tasks")
    expired_tasks_btn = types.InlineKeyboardButton(f"üï∞ –∏—Å—Ç–µ–∫—à–∏–µ  ({len(expire)})", callback_data="expired_tasks")
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main")
    keyboard.row(active_tasks_btn, finished_tasks_btn)
    keyboard.row(canceled_tasks_btn, expired_tasks_btn)
    keyboard.add(back_btn)

    if task_status == OnlinesimStatus.waiting:
        task_type_name = "‚ôªÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ"
    elif task_status == OnlinesimStatus.success:
        task_type_name = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"
    elif task_status == OnlinesimStatus.cancel:
        task_type_name = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"
    elif task_status == OnlinesimStatus.expire:
        task_type_name = "üï∞ –ò—Å—Ç–µ–∫—à–∏–µ"

    message_text = f"{task_type_name} –æ–ø–µ—Ä–∞—Ü–∏–∏ ({len(user_operations)}):"

    await call.message.edit_caption(message_text, reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(task_manager_cb.filter())
async def task_manager_message(call: types.CallbackQuery, callback_data: dict):
    tzid = int(callback_data["tzid"])

    task = await sim_service.getState(tzid)
    task_info = Onlinesim.where(tzid=tzid).first()

    if not task_info:
        await call.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", True)
        return

    if task:
        msg_raw = []

        for _msg in task.get("msg", []):
            __received_msg = _msg.get("msg", "")
            msg_raw.append(__received_msg)

        time = task.get("time", 0)
        number = task.get('number')
        service_response = task.get("response")
    else:
        msg_raw = task_info.msg
        time = 0
        number = task_info.number
        service_response = None

    countries_list = await sim_service.countries_list()
    services_list = await sim_service.number_stats(task_info.country_code)

    service = services_list.get(task_info.service_code)
    country = countries_list.get(task_info.country_code)

    if task_info.status == OnlinesimStatus.waiting:
        status = "–ê–∫—Ç–∏–≤–Ω–æ"
    elif task_info.status == OnlinesimStatus.success:
        status = "–£—Å–ø–µ—à–Ω–æ"
    elif task_info.status == OnlinesimStatus.expire:
        status = "–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏–∏"
    elif task_info.status == OnlinesimStatus.cancel:
        status = "–û—Ç–º–µ–Ω–µ–Ω–∞"

    keyboard = types.InlineKeyboardMarkup()
    if task_info.status == OnlinesimStatus.waiting:
        if msg_raw:
            cancel_task_btn = types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data=cancel_task_cb.new(tzid))
        else:
            cancel_task_btn = types.InlineKeyboardButton("üìõ –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data=cancel_task_cb.new(tzid))
        keyboard.add(cancel_task_btn)
        update_btn = types.InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=task_manager_cb.new(tzid))
        keyboard.add(update_btn)
    black_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="active_tasks")
    keyboard.add(black_btn)

    expirity = readable_timedelta(datetime.timedelta(seconds=time))
    msg = '\n'.join(mark_sms_code(msg_raw))

    message_text = [
        f"‚ñ´Ô∏è ID –æ–ø—Ä–µ–∞—Ü–∏–∏: {task_info.id}",
        f"‚ñ´Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}",
        f"‚ñ´Ô∏è –°—Ç—Ä–∞–Ω–∞: {country}",
        f"‚ñ´Ô∏è –°–µ—Ä–≤–∏—Å: {service.get('service')}",
        f"‚ñ´Ô∏è –¶–µ–Ω–∞: {task_info.price}‚ÇΩ",
        f"‚ñ´Ô∏è –í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏: {task_info.created_at.astimezone(pytz.timezone('Europe/Moscow'))} (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)",
        f"‚ñ´Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–∞: {expirity}",
        f"‚ñ´Ô∏è –°—Ç–∞—Ç—Éc: {status}",
        f"‚ñ´Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è ({len(msg_raw)}):",
        f"{msg}"
    ]

    try:
        await call.message.edit_caption('\n'.join(message_text), reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    except Exception:
        pass

    await call.answer()

    if task:
        task_info.update(msg=msg_raw)
        if service_response in ["TZ_OVER_EMPTY", "TZ_OVER_OK"]:
            await cancel_task_message(call, callback_data)
        else:
            await sim_service.setOperationRevise(tzid)
    else:
        if task_info.status == OnlinesimStatus.waiting:
            await cancel_task_message(call, callback_data)


@dp.callback_query_handler(cancel_task_cb.filter())
async def cancel_task_message(call: types.CallbackQuery, callback_data: dict):
    tzid = int(callback_data["tzid"])

    task = await sim_service.getState(tzid)
    task_info = Onlinesim.where(tzid=tzid).first()

    # if close_task_info.get("response") != "1":
    #     await call.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–π—á–∞—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ", True)
    #     return

    if task:
        msg_raw = task.get("msg", [])
        service_response = task.get("response")
    else:
        msg_raw = task_info.msg
        service_response = None

    msg_raw = []

    if not msg:
        user = User.where(user_id=call.message.chat.id).first()
        user.update(balance=user.balance + task_info.price)
    else:
        for _msg in msg:
            __received_msg = _msg.get("msg", "")
            msg_raw.append(__received_msg)

    if service_response in ["TZ_OVER_OK", "TZ_NUM_ANSWER"]:
        _task_status = OnlinesimStatus.success
    elif service_response == "TZ_NUM_WAIT":
        _task_status = OnlinesimStatus.cancel
    elif service_response == "TZ_OVER_EMPTY":
        _task_status = OnlinesimStatus.expire
    else:
        ic(f"Unknown task status: {service_response}")
        _task_status = OnlinesimStatus.cancel

    task_info.update(msg=msg_raw, status=_task_status)

    close_task_info = await sim_service.setOperationOk(tzid)
    await task_manager_message(call, callback_data)
    # await call.answer("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.callback_query_handler(text="balance", state='*')
async def balance_message(call: types.CallbackQuery, state: FSMContext):
    await state.finish()

    user_balance = User.where(user_id=call.message.chat.id).first().balance

    keyboard = types.InlineKeyboardMarkup()
    refill_history_btn = types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="refill_history")
    refill_balance_btn = types.InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="refill_balance")
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main")
    keyboard.add(refill_history_btn)
    keyboard.add(refill_balance_btn)
    keyboard.add(back_btn)
    message_text = [
        f"üí≤ –í–∞—à –±–∞–ª–∞–Ω—Å: **{user_balance} ‚ÇΩ**",
        f"üè∑ –í–∞—à id: `{call.message.chat.id}`",
        ""
    ]
    await call.message.edit_caption('\n'.join(message_text), reply_markup=keyboard, parse_mode=types.ParseMode.MARKDOWN)
    await call.answer()


@dp.callback_query_handler(text="refill_history")
async def refill_history_message(call: types.CallbackQuery):
    user = User.where(user_id=call.message.chat.id).first()
    user_refills = user.refills

    keyboard = types.InlineKeyboardMarkup()
    if not user_refills:
        no_refills_btn = types.InlineKeyboardButton("–í—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", callback_data="refill_balance")
        keyboard.add(no_refills_btn)
    else:
        for refill in user_refills:
            refill_btn = types.InlineKeyboardButton(f"{refill.source.name} | +{refill.amount}", callback_data="refill_manager")
            keyboard.add(refill_btn)
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="balance")
    keyboard.add(back_btn)
    message_text = [
        "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: {len(user_refills)}"
    ]
    await call.message.edit_caption('\n'.join(message_text), reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='refill_balance', state='*')
async def refill_balance_message(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    amounts_list = [50, 100, 250, 500, 1000, 5000]
    amount_btn_list = []

    for amount in amounts_list:
        amount_btn = types.InlineKeyboardButton(amount, callback_data=paymemt_method_cb.new(amount))
        amount_btn_list.append(amount_btn)

    message_text = [
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—É–º–º—É –Ω–∏–∂–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É:",
        "",
        "–ü—Ä–∏–º–µ—Ä: 100",
        "",
        "P.S.: –°–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è - –ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞ –æ—Ç 1000 —Ä—É–±–ª–µ–π +5% –±–æ–Ω—É—Å. –û—Ç 2000 —Ä—É–±–ª–µ–π –∏ –±–æ–ª–µ–µ +10% –ù–∞–ª–µ—Ç–∞–π –ø–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ!"
    ]

    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="balance")
    keyboard.add(*amount_btn_list)
    keyboard.add(back_btn)
    await call.message.edit_caption('\n'.join(message_text), reply_markup=keyboard)
    await call.answer()
    await PaymentMethod.waiting_amount.set()


@dp.callback_query_handler(paymemt_method_cb.filter(), state=PaymentMethod.waiting_amount)
async def refill_balance_amount_callback(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    amount = callback_data.get("amount", 700)

    await state.update_data({"amount": amount})

    await refill_balance_method_message(call.message, state, "edit")
    await call.answer()


@dp.message_handler(state=PaymentMethod.waiting_amount, content_types=types.ContentTypes.TEXT)
async def refill_balance_amount_message(msg: types.Message, state: FSMContext):
    amount = msg.text

    if not amount.isdigit():
        keyboard = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="balance")
        keyboard.add(back_btn)
        await msg.answer_photo(types.InputFile(os.path.join("bot", "images", "main.jpg")), caption="–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ü–∏—Ñ—Ä–∞—Ö", reply_markup=keyboard)
        return

    await state.update_data({"amount": amount})

    await refill_balance_method_message(msg, state, "answer")


@dp.message_handler(state=PaymentMethod.waiting_method, content_types=types.ContentTypes.TEXT)
async def refill_balance_method_message(msg: types.Message, state: FSMContext, msg_type: str = "answer"):
    user_data = await state.get_data()
    amount = user_data.get("amount", 700)

    keyboard = types.InlineKeyboardMarkup()
    qiwi_btn = types.InlineKeyboardButton("QIWI", callback_data=refill_balance_via_cb.new(amount=amount, method="qiwi"))
    yoomoney_btn = types.InlineKeyboardButton("YooMoney", callback_data=refill_balance_via_cb.new(amount=amount, method="yoomoney"))
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="refill_balance")
    keyboard.add(qiwi_btn)
    keyboard.add(yoomoney_btn)
    keyboard.add(back_btn)
    message_text = [
        f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}",
        "",
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
        f"–ï—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É: {config.ADMIN_USERNAME}"
    ]
    if msg_type == "edit":
        await msg.edit_caption('\n'.join(message_text), reply_markup=keyboard)
    elif msg_type == "answer":
        await msg.answer_photo(types.InputFile(os.path.join("bot", "images", "main.jpg")), caption='\n'.join(message_text), reply_markup=keyboard)

    await PaymentMethod.waiting_method.set()


@dp.callback_query_handler(refill_balance_via_cb.filter(method=["qiwi"]), state=PaymentMethod.waiting_method)
async def refill_balance_via_qiwi_message(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    amount = int(callback_data.get("amount", 700))

    qiwi_payment_comment = f"ActiVision-{call.message.chat.id}"
    qiwi_payment_link = generate_qiwi_payment_form_link("99", config.QIWI_WALLET, amount, qiwi_payment_comment, 643, ["account", "comment"], 0)

    keyboard = types.InlineKeyboardMarkup()
    payement_qiwi_btn = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", qiwi_payment_link)
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="refill_balance")
    keyboard.add(payement_qiwi_btn)
    keyboard.add(back_btn)
    message_text = [
        "üí≤ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ QIWI üí≤",
        "",
        "‚ñ´Ô∏è –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –Ω–∞",
        f"‚ñ´Ô∏è Qiwi –∫–æ—à–µ–ª–µ–∫: `{config.QIWI_WALLET}`",
        "‚ùóÔ∏è –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ:",
        f'`{qiwi_payment_comment}`',
        "‚ñ´Ô∏è –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 –º–∏–Ω—É—Ç",
        "‚ñ´Ô∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ"
    ]
    await call.message.edit_caption('\n'.join(message_text), parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
    await call.answer()

    await state.finish()


@dp.callback_query_handler(refill_balance_via_cb.filter(method=["yoomoney"]), state=PaymentMethod.waiting_method)
async def refill_balance_via_yoomoney_message(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    amount = int(callback_data.get("amount", 700))

    yoomoney_payment_label = f"ActiVision-{call.message.chat.id}"
    yoomoney_payment_link = generate_yoomoney_payment_form_link(config.YOOMONEY_RECEIVER, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ ActiVision", yoomoney_payment_label, amount)

    keyboard = types.InlineKeyboardMarkup()
    payement_yoomoney_btn = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", yoomoney_payment_link)
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="refill_balance")
    keyboard.add(payement_yoomoney_btn)
    keyboard.add(back_btn)
    message_text = [
        "üí≤ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ YooMoney üí≤",
        "",
        "‚ñ´Ô∏è –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 –º–∏–Ω—É—Ç",
        "‚ñ´Ô∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ"
    ]
    await call.message.edit_caption('\n'.join(message_text), parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
    await call.answer()

    await state.finish()


@dp.callback_query_handler(text="partners")
async def check_referrals(call: types.CallbackQuery):
    referrals = User.where(user_id=call.message.chat.id).first().refferals
    referrals_refils = Refill.where(user_id=call.message.chat.id, source=RefillSource.REFERRAL).all()

    referrals_balance = 0.0
    for referral in referrals_refils:
        referrals_balance += referral.amount

    bot_username = (await call.bot.me).username
    bot_link = f"https://t.me/{bot_username}?start={call.message.chat.id}"
    _frwd_telegram_url = "https://t.me/share/url"
    _frwd_telegram_params = {"url": bot_link, "text": "ActiVision - —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏—ë–º–∞ SMS —Å–æ–æ–±—â–µ–Ω–∏–π"}
    _frwd_telegram_req = PreparedRequest()
    _frwd_telegram_req.prepare_url(_frwd_telegram_url, _frwd_telegram_params)
    forward_url = _frwd_telegram_req.url

    keyboard = types.InlineKeyboardMarkup()
    forward_link_btn = types.InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", forward_url)
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main")
    keyboard.add(forward_link_btn)
    keyboard.add(back_btn)
    message_text = [
        "üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üë•",
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
        "‚ñ´Ô∏è –í –Ω–∞—à–µ–º –±–æ—Ç–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞ –∫–∞–∂–¥—ã–π –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –Ω–æ–º–µ—Ä. –í –±—É–¥—É—â–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 3 —É—Ä–æ–≤–Ω–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "",
        f"‚ñ´Ô∏è 1 —É—Ä–æ–≤–µ–Ω—å - 0.25‚ÇΩ –∑–∞ –Ω–æ–º–µ—Ä: {len(referrals)} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ø—Ä–∏–Ω–µ—Å–ª–∏ {referrals_balance}‚ÇΩ",
        "",
        "üîó –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:",
        bot_link
    ]

    await call.message.edit_caption('\n'.join(message_text), reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="information")
async def information_message(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    tech_support_btn = types.InlineKeyboardButton("üë®‚Äçüíª –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "https://t.me/SanjarDS")
    news_btn = types.InlineKeyboardButton("üì¢ –ù–æ–≤–æ—Å—Ç–∏", "https://t.me/ActiVisioNews")
    back_btn = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main")
    keyboard.add(tech_support_btn)
    keyboard.add(news_btn)
    keyboard.add(back_btn)
    message_text = [
        "ActiVision - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏—ë–º–∞ SMS —Å–æ–æ–±—â–µ–Ω–∏–π",
        "",
        "–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:",
        "‚úîÔ∏è –ù–∏–∑–∫–∏–µ —Ü–µ–Ω—ã",
        "‚úîÔ∏è –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
        "‚úîÔ∏è –ë—ã—Å—Ç—Ä–æ—Ç–∞ –∏ —É–¥–æ–±—Å—Ç–≤–æ",
        "‚úîÔ∏è –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Å—Ç—Ä–∞–Ω",
        "‚úîÔ∏è –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        "‚úîÔ∏è –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        "‚úîÔ∏è –û—Ç–∑—ã–≤—á–∏–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    ]
    await call.message.edit_caption('\n'.join(message_text), reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler()
async def callback_handler(call: types.CallbackQuery):
    answer_data = call.data
    if answer_data == "balance_btn":
        await balance_message(call.message, "edit")
        await call.answer()
    elif answer_data == 'active_tasks':
        await all_operations_message(call, OnlinesimStatus.waiting)
        await call.answer()
    elif answer_data == 'finished_tasks':
        await all_operations_message(call, OnlinesimStatus.success)
        await call.answer()
    elif answer_data == 'canceled_tasks':
        await all_operations_message(call, OnlinesimStatus.cancel)
        await call.answer()
    elif answer_data == 'expired_tasks':
        await all_operations_message(call, OnlinesimStatus.expire)
        await call.answer()
    else:
        await call.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", True)
